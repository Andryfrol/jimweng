// Code generated by protoc-gen-go.
// source: helloworld.proto
// DO NOT EDIT!

/*
Package helloworld is a generated protocol buffer package.

It is generated from these files:
	helloworld.proto

It has these top-level messages:
	HelloRequest
	HelloReply
*/
package helloworld

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HelloRequest_EnumTest int32

const (
	HelloRequest_testNNum   HelloRequest_EnumTest = 0
	HelloRequest_testString HelloRequest_EnumTest = 1
	HelloRequest_jim        HelloRequest_EnumTest = 2
	HelloRequest_bob        HelloRequest_EnumTest = 3
)

var HelloRequest_EnumTest_name = map[int32]string{
	0: "testNNum",
	1: "testString",
	2: "jim",
	3: "bob",
}
var HelloRequest_EnumTest_value = map[string]int32{
	"testNNum":   0,
	"testString": 1,
	"jim":        2,
	"bob":        3,
}

func (x HelloRequest_EnumTest) String() string {
	return proto.EnumName(HelloRequest_EnumTest_name, int32(x))
}
func (HelloRequest_EnumTest) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// The request message containing the user's name.
type HelloRequest struct {
	Name     string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	TestNum  int32                 `protobuf:"varint,2,opt,name=testNum" json:"testNum,omitempty"`
	EnumTest HelloRequest_EnumTest `protobuf:"varint,4,opt,name=enumTest,enum=helloworld.HelloRequest_EnumTest" json:"enumTest,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HelloRequest) GetTestNum() int32 {
	if m != nil {
		return m.TestNum
	}
	return 0
}

func (m *HelloRequest) GetEnumTest() HelloRequest_EnumTest {
	if m != nil {
		return m.EnumTest
	}
	return HelloRequest_testNNum
}

// The response message containing the greetings
type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "helloworld.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "helloworld.HelloReply")
	proto.RegisterEnum("helloworld.HelloRequest_EnumTest", HelloRequest_EnumTest_name, HelloRequest_EnumTest_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Greeter service

type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// Sends another greeting
	SayHelloAgain(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayHelloAgain(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/SayHelloAgain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// Sends another greeting
	SayHelloAgain(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayHelloAgain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHelloAgain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/SayHelloAgain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHelloAgain(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
		{
			MethodName: "SayHelloAgain",
			Handler:    _Greeter_SayHelloAgain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld.proto",
}

// Client API for Greeter2 service

type Greeter2Client interface {
	SayBye(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeter2Client struct {
	cc *grpc.ClientConn
}

func NewGreeter2Client(cc *grpc.ClientConn) Greeter2Client {
	return &greeter2Client{cc}
}

func (c *greeter2Client) SayBye(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter2/SayBye", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter2 service

type Greeter2Server interface {
	SayBye(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterGreeter2Server(s *grpc.Server, srv Greeter2Server) {
	s.RegisterService(&_Greeter2_serviceDesc, srv)
}

func _Greeter2_SayBye_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Greeter2Server).SayBye(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter2/SayBye",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Greeter2Server).SayBye(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter2",
	HandlerType: (*Greeter2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayBye",
			Handler:    _Greeter2_SayBye_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld.proto",
}

func init() { proto.RegisterFile("helloworld.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x3b, 0x6d, 0xff, 0x36, 0xff, 0xa5, 0xd6, 0x70, 0x17, 0x12, 0x74, 0x53, 0xb3, 0x90,
	0xae, 0x82, 0xc4, 0x9d, 0xa8, 0x60, 0x45, 0xec, 0xaa, 0x94, 0x54, 0x70, 0x3d, 0xd5, 0x4b, 0x8c,
	0xcc, 0x64, 0xe2, 0xcc, 0x04, 0xcd, 0x4b, 0xf8, 0x3a, 0xbe, 0x9e, 0x4c, 0x48, 0x34, 0x0b, 0xdd,
	0x74, 0x77, 0xcf, 0x9d, 0x73, 0xbe, 0x39, 0x30, 0x03, 0xfe, 0x33, 0x09, 0xa1, 0xde, 0x94, 0x16,
	0x4f, 0x51, 0xa1, 0x95, 0x55, 0x08, 0x3f, 0x9b, 0xf0, 0x93, 0xc1, 0x64, 0xe9, 0x64, 0x42, 0xaf,
	0x25, 0x19, 0x8b, 0x08, 0xc3, 0x9c, 0x4b, 0x0a, 0xd8, 0x8c, 0xcd, 0xff, 0x27, 0xf5, 0x8c, 0x01,
	0x8c, 0x2d, 0x19, 0xbb, 0x2a, 0x65, 0xd0, 0x9f, 0xb1, 0xf9, 0xbf, 0xa4, 0x95, 0x78, 0x09, 0x1e,
	0xe5, 0xa5, 0xbc, 0x27, 0x63, 0x83, 0xe1, 0x8c, 0xcd, 0xa7, 0xf1, 0x71, 0xd4, 0xb9, 0xaf, 0x4b,
	0x8e, 0x6e, 0x1b, 0x63, 0xf2, 0x1d, 0x09, 0xcf, 0xc1, 0x6b, 0xb7, 0x38, 0x01, 0xaf, 0xa6, 0xae,
	0x4a, 0xe9, 0xf7, 0x70, 0x0a, 0xe0, 0xd4, 0xc6, 0xea, 0x2c, 0x4f, 0x7d, 0x86, 0x63, 0x18, 0xbc,
	0x64, 0xd2, 0xef, 0xbb, 0x61, 0xab, 0xb6, 0xfe, 0x20, 0x3c, 0x01, 0x68, 0xf0, 0x85, 0xa8, 0x5c,
	0x45, 0x49, 0xc6, 0xf0, 0xb4, 0x6d, 0xde, 0xca, 0xf8, 0x83, 0xc1, 0xf8, 0x4e, 0x13, 0x59, 0xd2,
	0x78, 0x05, 0xde, 0x86, 0x57, 0x75, 0x0c, 0x83, 0xbf, 0x8a, 0x1e, 0x1e, 0xfc, 0x72, 0x52, 0x88,
	0x2a, 0xec, 0xe1, 0x0d, 0xec, 0xb5, 0xf9, 0xeb, 0x94, 0x67, 0xf9, 0x2e, 0x90, 0x78, 0x09, 0x5e,
	0xd3, 0x27, 0xc6, 0x0b, 0x18, 0x6d, 0x78, 0xb5, 0xa8, 0x68, 0x17, 0xd2, 0xe2, 0x14, 0x8e, 0x32,
	0x15, 0xa5, 0xba, 0x78, 0x8c, 0xe8, 0x9d, 0xcb, 0x42, 0x90, 0xe9, 0x78, 0x17, 0xfb, 0xb5, 0xf9,
	0xc1, 0xcd, 0x6b, 0xf7, 0xf0, 0x6b, 0xb6, 0x1d, 0xd5, 0x3f, 0xe0, 0xec, 0x2b, 0x00, 0x00, 0xff,
	0xff, 0x9e, 0xf1, 0xa1, 0xf8, 0x15, 0x02, 0x00, 0x00,
}
