// refer to website
// https://stackoverflow.com/questions/38673673/access-http-response-as-string-in-go
// https://gobyexample.com/json

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"reflect"
	"time"
)

var myClient = &http.Client{Timeout: 10 * time.Second}

func getJson(url string, target interface{}) error {
	r, err := myClient.Get(url)
	if err != nil {
		return err
	}
	defer r.Body.Close()

	return json.NewDecoder(r.Body).Decode(target)
}

func main() {

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	type Payload struct {
		Query string `json:"query"`
	}

	data := Payload{
		Query: "MATCH p=(n1)-[r]->(n2) return id(r), n1.name, labels(n1), type(r), n2.name, labels(n2)",
		// Query: "match(n) return id(n) ,n.name, n.relationship",
	}
	payloadBytes, err := json.Marshal(data)
	if err != nil {
		// handle err
	}
	body := bytes.NewReader(payloadBytes)

	req, err := http.NewRequest("POST", "http://172.31.86.190:7474/db/data/cypher", body)
	if err != nil {
		// handle err
	}
	req.SetBasicAuth("neo4j", "na")
	req.Header.Set("Accept", "application/json")
	req.Header.Set("Content-Type", "application/json")

	resp, err := http.DefaultClient.Do(req)

	fmt.Println(reflect.TypeOf(req.Body))
	fmt.Println("------")
	// fmt.Println(resp)
	fmt.Println(reflect.TypeOf(resp))
	// fmt.Println(err)
	fmt.Println("------")
	if resp.StatusCode == http.StatusOK {
		bodyBytes, _ := ioutil.ReadAll(resp.Body)

		fmt.Println(reflect.TypeOf(bodyBytes))
		bodystring := string(bodyBytes)

		fmt.Println(bodystring)
	}

	if err != nil {
		// handle err
	}
	defer resp.Body.Close()
}
